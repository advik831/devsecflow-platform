@echo off
REM DevOps Platform - Local Development Setup (Windows)
REM This script sets up a local PostgreSQL database using Docker

echo 🚀 Setting up DevOps Platform for local development...
echo.

REM Check if Docker is installed
docker --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ Docker is not installed. Please install Docker first:
    echo    https://docs.docker.com/get-docker/
    exit /b 1
)

REM Check if Docker Compose is available
docker compose version >nul 2>&1
if %errorlevel% neq 0 (
    docker-compose --version >nul 2>&1
    if %errorlevel% neq 0 (
        echo ❌ Docker Compose is not available. Please install Docker Compose:
        echo    https://docs.docker.com/compose/install/
        exit /b 1
    )
    set DOCKER_COMPOSE_CMD=docker-compose
) else (
    set DOCKER_COMPOSE_CMD=docker compose
)

echo 📦 Using: %DOCKER_COMPOSE_CMD%
echo.

REM Stop any existing containers
echo 🛑 Stopping any existing containers...
%DOCKER_COMPOSE_CMD% -f docker-compose.local.yml down --remove-orphans

REM Start PostgreSQL
echo 🐘 Starting PostgreSQL database...
%DOCKER_COMPOSE_CMD% -f docker-compose.local.yml up -d postgres

REM Wait for database to be ready
echo ⏳ Waiting for database to be ready...
set timeout=60
set counter=0

:wait_loop
docker exec devops-platform-db pg_isready -U postgres -d devops_platform >nul 2>&1
if %errorlevel% equ 0 goto db_ready
if %counter% geq %timeout% (
    echo ❌ Database failed to start within %timeout% seconds
    echo 📋 Container logs:
    %DOCKER_COMPOSE_CMD% -f docker-compose.local.yml logs postgres
    exit /b 1
)
echo|set /p="."
timeout /t 2 /nobreak >nul
set /a counter=%counter%+2
goto wait_loop

:db_ready
echo.
echo ✅ PostgreSQL database is ready!
echo.

REM Create .env.local file
echo 📄 Creating local environment configuration...
(
echo # DevOps Platform - Local Development Environment
echo # Generated by setup-local.bat
echo.
echo # Database Configuration ^(Local PostgreSQL^)
echo DATABASE_URL=postgresql://postgres:devops123@localhost:5432/devops_platform
echo DATABASE_MODE=bundled
echo DB_HOST=localhost
echo DB_PORT=5432
echo DB_NAME=devops_platform
echo DB_USER=postgres
echo DB_PASSWORD=devops123
echo DB_SSL=false
echo.
echo # Application Configuration
echo NODE_ENV=development
echo PORT=5000
echo SESSION_SECRET=local-dev-session-secret-not-for-production
echo.
echo # Database Migrations
echo RUN_MIGRATIONS=true
echo.
echo # GitHub Integration ^(Optional^)
echo # GITHUB_CLIENT_ID=your_client_id
echo # GITHUB_CLIENT_SECRET=your_client_secret
) > .env.local

echo ✅ Created .env.local with database configuration
echo.

REM Install dependencies if needed
if not exist "node_modules" (
    echo 📦 Installing dependencies...
    npm install
)

echo 🎉 Local development setup complete!
echo.
echo 📋 Next steps:
echo    1. Run: node scripts/dev-local.js
echo    2. Open: http://localhost:5000
echo.
echo 🛠️  Available commands:
echo    node scripts/dev-local.js              - Start development server with local DB
echo    docker compose -f docker-compose.local.yml down    - Stop local database
echo    docker compose -f docker-compose.local.yml restart postgres - Restart local database
echo    docker compose -f docker-compose.local.yml logs postgres    - View database logs
echo.
echo 💡 Your local PostgreSQL database is running on port 5432
echo    Connection: postgresql://postgres:devops123@localhost:5432/devops_platform